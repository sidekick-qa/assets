openapi: "3.0.3"
info:
  description: "This is the api server schema."
  version: "1.0.0"
  title: "Sidekick Api"
  termsOfService: "https://docs.answerbot.app/terms-of-service/"
  contact:
    email: "colethienes@sidekickqa.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
- name: "questions"
  description: "A saved question for a website."
- name: "queries"
  description: "One query to the answer service."
- name: "websites"
  description: "A domain and account combination."
- name: "accounts"
  description: "An individual user account."
- name: "slack"
  description: "Resources for managing a slack integration."
- name: "analytics"
  description: "Metrics."
paths:
  /questions:
    post:
      tags:
      - "questions"
      summary: "Add a question."
      description: ""
      operationId: "addQuestion"
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
      responses:
        "200":
          description: "success"
        "400":
          description: "Invalid question"
      security:
      - accountId: []
  /questions/{questionId}:
    get:
      tags:
        - "questions"
      summary: "Get a question."
      description: ""
      operationId: "getQuestion"
      parameters:
        - in: path
          name: questionId
          schema:
            type: string
          required: true
      responses:
        "200":
          description: "success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        "404":
          description: "Question not found"
    patch:
      tags:
      - "questions"
      summary: "Update an existing question"
      description: ""
      operationId: "updateQuestion"
      parameters:
        - in: path
          name: questionId
          schema:
            type: string
          required: true
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
      responses:
        "200":
          description: "success"
        "404":
          description: "Question not found"
  /questions/search:
    post:
      tags:
      - "questions"
      summary: "Search through questions."
      description: ""
      operationId: "searchQuestions"
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestBodyQuestionsSearchPost'
      responses:
        "200":
          description: "success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseBodyQuestionsSearchPost'
        "400":
          description: "Invalid status value"
  /queries:
    post:
      tags:
      - "queries"
      summary: "Get an answer for a given query."
      description: ""
      operationId: "queryQuestion"
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestBodyQueriesPost'
      responses:
        "200":
          description: "success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        "400":
          description: "Invalid status value"
  /queries/history:
    post:
      tags:
      - "queries"
      summary: "Get most recent queries, with given filters."
      description: ""
      operationId: "getQueriesHistory"
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestBodyQueriesHistoryGet'
      responses:
        "200":
          description: "success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseBodyQueriesHistoryPost'
        "400":
          description: "Invalid status value"
  /websites:
    post:
      tags:
      - "websites"
      summary: "Add a website."
      description: ""
      operationId: "addWebsite"
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestBodyWebsitesPost'
      responses:
        "200":
          description: "success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Website'
        "400":
          description: "Invalid status value"
  /websites/{websiteId}:
    patch:
      tags:
        - "websites"
      summary: "Update a website."
      description: ""
      operationId: "updateWebsite"
      parameters:
        - in: path
          name: websiteId
          schema:
            type: string
          required: true
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Website'
      responses:
        "200":
          description: "success"
        "400":
          description: "Invalid status value"
    delete:
      tags:
        - "websites"
      summary: "Delete a website."
      description: ""
      operationId: "deleteWebsite"
      parameters:
      - in: path
        name: websiteId
        schema:
          type: string
        required: true
        description: Website Id of the website to delete
      responses:
        "200":
          description: "success"
        "400":
          description: "Invalid status value"
  /accounts/search:
    post:
      tags:
        - "accounts"
      summary: "Get all accounts the user has access to."
      description: ""
      operationId: "getAccounts"
      responses:
        "200":
          description: "success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseBodyAccountsSearchPost'
        "400":
          description: "Invalid status value"
  /accounts/login/{firebaseIdToken}:
    post:
      tags:
        - "accounts"
      summary: "Login with a firebase id token."
      description: ""
      operationId: "login"
      parameters:
        - in: path
          name: firebaseIdToken
          schema:
            type: string
          required: true
      responses:
        "200":
          description: "success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        "400":
          description: "Invalid status value"
  /accounts/switch/{accountId}:
    post:
      tags:
        - "accounts"
      summary: "Switch accounts (admin only)."
      description: ""
      operationId: "switchAccount"
      parameters:
        - in: path
          name: accountId
          schema:
            type: string
          required: true
      responses:
        "200":
          description: "success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        "400":
          description: "Invalid status value"
  /slack/teams:
    post:
      tags:
        - "slack"
      summary: "Add slack integration."
      description: ""
      operationId: "addSlackTeam"
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SlackTeam'
      responses:
        "200":
          description: "success"
        "400":
          description: "Invalid status value"
  /slack/teams/{slackTeamId}:
    get:
      tags:
        - "slack"
      summary: "Get slack integration."
      description: ""
      operationId: "getSlackTeam"
      parameters:
        - in: path
          name: slackTeamId
          schema:
            type: string
          required: true
      responses:
        "200":
          description: "success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SlackTeam'
        "400":
          description: "Invalid status value"
    patch:
      tags:
        - "slack"
      summary: "Update slack integration."
      description: ""
      operationId: "updateSlackTeam"
      parameters:
        - in: path
          name: slackTeamId
          schema:
            type: string
          required: true
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SlackTeam'
      responses:
        "200":
          description: "success"
        "400":
          description: "Invalid status value"
  /analytics/charts:
    get:
      tags:
        - "analytics"
      summary: "Get charts for an account."
      description: ""
      operationId: "getCharts"
      responses:
        "200":
          description: "success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chart'
        "400":
          description: "Invalid status value"
    post:
      tags:
        - "analytics"
      summary: "Add an analytics chart."
      description: ""
      operationId: "addChart"
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Chart'
      responses:
        "200":
          description: "success"
        "400":
          description: "Invalid status value"
  /analytics/charts/{chartId}:
    patch:
      tags:
        - "analytics"
      summary: "Update a chart."
      description: ""
      operationId: "updateChart"
      parameters:
        - in: path
          name: chartId
          schema:
            type: string
          required: true
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Chart'
      responses:
        "200":
          description: "success"
        "400":
          description: "Invalid status value"
    delete:
      tags:
        - "analytics"
      summary: "Delete a chart."
      description: ""
      operationId: "deleteChart"
      parameters:
        - in: path
          name: chartId
          schema:
            type: string
          required: true
      responses:
        "200":
          description: "success"
        "400":
          description: "Invalid status value"
  /analytics/charts/data:
    post:
      tags:
        - "analytics"
      summary: "Get chart data."
      description: ""
      operationId: "getChartData"
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChartMetrics'
      responses:
        "200":
          description: "success"
        "400":
          description: "Invalid status value"

components:
  securitySchemes:
    accountId:
      type: "apiKey"
      name: "accountId"
      in: "cookie"
  schemas:

    Account:
      type: object
      properties:
        email:
          type: string
        id:
          type: string
        isAdmin:
          type: boolean
        name:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        photoUrl:
          type: string
          nullable: true
        provider:
          type: string
    Question:
      type: "object"
      properties:
        answerText:
          type: string
        id:
          type: string
        isCertified:
          type: boolean
        isFeatured:
          type: boolean
        link:
          type: string
          nullable: true
        questionText:
          type: string
          nullable: false
        searchLinks:
          type: array
          items:
            type: string
          nullable: true
        searchSnippets:
          type: array
          items:
            type: string
          nullable: true
        searchTitles:
          type: array
          items:
            type: string
          nullable: true
        title:
          type: string
          nullable: true
    Query:
      type: object
      properties:
        answerText:
          type: string
          nullable: true
        id:
          type: string
        link:
          type: string
          nullable: true
        questionText:
          type: string
        source:
          type: string
        timestamp:
          type: integer
        visitorId:
          type: string
          nullable: true
        wasHelpful:
          type: boolean
          nullable: true
    SlackTeam:
      type: object
      properties:
        accessToken:
          type: string
        accountId:
          type: string
        botAccessToken:
          type: string
        botIconUrl:
          type: string
          nullable: true
        botId:
          type: string
        botName:
          type: string
          nullable: true
        botUserId:
          type: string
        enterpriseId:
          type: string
          nullable: true
        id:
          type: string
        sld:
          type: string
        teamId:
          type: string
        teamName:
          type: string
    Website:
      type: object
      properties:
        callToActionExists:
          type: boolean
        callToActionLink:
          type: string
        canSearchWeb:
          type: boolean
        color:
          type: string
        contactLink:
          type: string
        headerText:
          type: string
        id:
          type: string
        sld:
          type: string
        subdomains:
          nullable: false
          type: array
          items:
            type: string

    Chart:
      type: object
      properties:
        chartType:
          type: string
          enum: [line, bar, area]
        id:
          type: string
        name:
          type: string
        period:
          type: string
          enum: [hour, day, week, month, all_time]
        websiteId:
          type: string
        metrics:
          $ref: '#/components/schemas/ChartMetrics'
    ChartMetrics:
      type: array
      items:
        oneOf:
        - $ref: '#/components/schemas/ChartMetricQuery'
        - $ref: '#/components/schemas/ChartMetricVisit'
        - $ref: '#/components/schemas/ChartMetricOpen'
        - $ref: '#/components/schemas/ChartMetricClose'
        - $ref: '#/components/schemas/ChartMetricClickCTA'
    ChartMetricQuery:
      type: object
      properties:
        filters:
          properties:
            answerText:
              type: string
            questionText:
              type: string
            source:
              type: string
              enum: [web, slack]
            wasHelpful:
              type: boolean
          type: object
        type:
          type: string
          enum: [query]
    ChartMetricVisit:
      type: object
      properties:
        filters:
          properties:
            url:
              type: string
          type: object
        type:
          type: string
          enum: [visit]
    ChartMetricOpen:
      type: object
      properties:
        filters:
          properties:
            url:
              type: string
          type: object
        type:
          type: string
          enum: [open]
    ChartMetricClose:
      type: object
      properties:
        filters:
          properties:
            url:
              type: string
          type: object
        type:
          type: string
          enum: [close]
    ChartMetricClickCTA:
      type: object
      properties:
        filters:
          properties:
            url:
              type: string
          type: object
        type:
          type: string
          enum: [clickCTA]

    RequestBodyQueriesHistoryGet:
      type: "object"
      properties:
        notAnswered:
            type: boolean
        pages:
            type: integer
        query:
            type: string
        toCsv:
            type: boolean
        wasHelpful:
            type: boolean
        wasNotHelpful:
            type: boolean
        websiteId:
            type: string
    RequestBodyQueriesPost:
      type: "object"
      properties:
        accountId:
          type: string
        query:
          type: string
        url:
          type: string
        source:
          type: string
        location:
          type: string
        visitorId:
          type: string
        ignoreCache:
          type: boolean
    RequestBodyWebsitesPost:
      type: object
      properties:
        url:
          type: string
    RequestBodyQuestionsSearchPost:
      type: object
      properties:
        isCertified:
          type: boolean
        isFeatured:
          type: boolean
        text:
          type: string
    ResponseBodyQuestionsSearchPost:
      type: array
      items:
        $ref: '#/components/schemas/Question'
    ResponseBodyQueriesHistoryPost:
      type: array
      items:
        $ref: '#/components/schemas/Query'
    ResponseBodyAccountsSearchPost:
      type: array
      items:
        $ref: '#/components/schemas/Account'

