openapi: "3.0.3"
info:
  description: "This is the api server schema."
  version: "1.0.0"
  title: "Sidekick Api"
  termsOfService: "https://docs.answerbot.app/terms-of-service/"
  contact:
    email: "colethienes@sidekickqa.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
- name: "questions"
  description: "A saved question for a website."
- name: "queries"
  description: "One query to the answer service."
- name: "websites"
  description: "A domain and account combination."
- name: "accounts"
  description: "An individual user account."
- name: "slack"
  description: "Resources for managing a slack integration."
- name: "analytics"
  description: "Metrics."
paths:
  /questions:
    post:
      tags:
      - "questions"
      summary: "Add a question."
      description: ""
      operationId: "addQuestion"
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        400:
          $ref: '#/components/responses/ValidationException'
        500:
          $ref: '#/components/responses/InternalErrorException'
      security:
      - accountId: []
  /questions/{questionId}:
    get:
      tags:
        - "questions"
      summary: "Get a question."
      description: ""
      operationId: "getQuestion"
      parameters:
        - in: path
          name: questionId
          schema:
            type: string
          required: true
      responses:
        "200":
          description: "success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        404:
          $ref: '#/components/responses/NotFoundException'
        500:
          $ref: '#/components/responses/InternalErrorException'
    put:
      tags:
      - "questions"
      summary: "Update an existing question"
      description: ""
      operationId: "updateQuestion"
      parameters:
        - in: path
          name: questionId
          schema:
            type: string
          required: true
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
      responses:
        "200":
          description: "success"
        "404":
          description: "Question not found"
        500:
          $ref: '#/components/responses/InternalErrorException'
  /questions/search:
    post:
      tags:
      - "questions"
      summary: "Search through questions."
      description: ""
      operationId: "searchQuestions"
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestBodyQuestionsSearchPost'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionPage'
        400:
          $ref: '#/components/responses/ValidationException'
        500:
          $ref: '#/components/responses/InternalErrorException'
  /queries:
    post:
      tags:
      - "queries"
      summary: "Get an answer for a given query."
      description: ""
      operationId: "queryQuestion"
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestBodyQueriesPost'
      responses:
        "200":
          description: "success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        400:
          $ref: '#/components/responses/ValidationException'
        500:
          $ref: '#/components/responses/InternalErrorException'
  /queries/history:
    post:
      tags:
      - "queries"
      summary: "Get most recent queries, with given filters."
      description: ""
      operationId: "getQueriesHistory"
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestBodyQueriesHistoryGet'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Query'
        400:
          $ref: '#/components/responses/ValidationException'
        500:
          $ref: '#/components/responses/InternalErrorException'
  /websites:
    post:
      tags:
      - "websites"
      summary: "Add a website."
      description: ""
      operationId: "addWebsite"
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestBodyWebsitesPost'
      responses:
        "200":
          description: "success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Website'
        400:
          $ref: '#/components/responses/ValidationException'
        500:
          $ref: '#/components/responses/InternalErrorException'
  /websites/{websiteId}:
    put:
      tags:
        - "websites"
      summary: "Update a website."
      description: ""
      operationId: "updateWebsite"
      parameters:
        - in: path
          name: websiteId
          schema:
            type: string
          required: true
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Website'
      responses:
        "200":
          description: "success"
        400:
          $ref: '#/components/responses/ValidationException'
        500:
          $ref: '#/components/responses/InternalErrorException'
    delete:
      tags:
        - "websites"
      summary: "Delete a website."
      description: ""
      operationId: "deleteWebsite"
      parameters:
      - in: path
        name: websiteId
        schema:
          type: string
        required: true
        description: Website Id of the website to delete
      responses:
        "200":
          description: "success"
        400:
          $ref: '#/components/responses/ValidationException'
        500:
          $ref: '#/components/responses/InternalErrorException'
  /accounts/search:
    post:
      tags:
        - "accounts"
      summary: "Get all accounts the user has access to."
      description: ""
      operationId: "getAccounts"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
        400:
          $ref: '#/components/responses/ValidationException'
        500:
          $ref: '#/components/responses/InternalErrorException'
  /accounts/login/{firebaseIdToken}:
    post:
      tags:
        - "accounts"
      summary: "Login with a firebase id token."
      description: ""
      operationId: "login"
      parameters:
        - in: path
          name: firebaseIdToken
          schema:
            type: string
          required: true
      responses:
        "200":
          description: "success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        400:
          $ref: '#/components/responses/ValidationException'
        500:
          $ref: '#/components/responses/InternalErrorException'
  /accounts/switch/{accountId}:
    post:
      tags:
        - "accounts"
      summary: "Switch accounts (admin only)."
      description: ""
      operationId: "switchAccount"
      parameters:
        - in: path
          name: accountId
          schema:
            type: string
          required: true
      responses:
        "200":
          description: "success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        400:
          $ref: '#/components/responses/ValidationException'
        500:
          $ref: '#/components/responses/InternalErrorException'
  /slack/teams:
    post:
      tags:
        - "slack"
      summary: "Add slack integration."
      description: ""
      operationId: "addSlackTeam"
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SlackTeam'
      responses:
        "200":
          description: "success"
        400:
          $ref: '#/components/responses/ValidationException'
        500:
          $ref: '#/components/responses/InternalErrorException'
  /slack/teams/{slackTeamId}:
    get:
      tags:
        - "slack"
      summary: "Get slack integration."
      description: ""
      operationId: "getSlackTeam"
      parameters:
        - in: path
          name: slackTeamId
          schema:
            type: string
          required: true
      responses:
        "200":
          description: "success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SlackTeam'
        400:
          $ref: '#/components/responses/ValidationException'
        500:
          $ref: '#/components/responses/InternalErrorException'
    put:
      tags:
        - "slack"
      summary: "Update slack integration."
      description: ""
      operationId: "updateSlackTeam"
      parameters:
        - in: path
          name: slackTeamId
          schema:
            type: string
          required: true
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SlackTeam'
      responses:
        "200":
          description: "success"
        400:
          $ref: '#/components/responses/ValidationException'
        500:
          $ref: '#/components/responses/InternalErrorException'
  /analytics/charts:
    get:
      tags:
        - "analytics"
      summary: "Get charts for an account."
      description: ""
      operationId: "getCharts"
      responses:
        "200":
          description: "success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chart'
        400:
          $ref: '#/components/responses/ValidationException'
        500:
          $ref: '#/components/responses/InternalErrorException'
    post:
      tags:
        - "analytics"
      summary: "Add an analytics chart."
      description: ""
      operationId: "addChart"
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Chart'
      responses:
        "200":
          description: "success"
        400:
          $ref: '#/components/responses/ValidationException'
        500:
          $ref: '#/components/responses/InternalErrorException'
  /analytics/charts/{chartId}:
    put:
      tags:
        - "analytics"
      summary: "Update a chart."
      description: ""
      operationId: "updateChart"
      parameters:
        - in: path
          name: chartId
          schema:
            type: string
          required: true
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Chart'
      responses:
        "200":
          description: "success"
        400:
          $ref: '#/components/responses/ValidationException'
        500:
          $ref: '#/components/responses/InternalErrorException'
    delete:
      tags:
        - "analytics"
      summary: "Delete a chart."
      description: ""
      operationId: "deleteChart"
      parameters:
        - in: path
          name: chartId
          schema:
            type: string
          required: true
      responses:
        "200":
          description: "success"
        400:
          $ref: '#/components/responses/ValidationException'
        500:
          $ref: '#/components/responses/InternalErrorException'
  /analytics/charts/data:
    post:
      tags:
        - "analytics"
      summary: "Get chart data."
      description: ""
      operationId: "getChartData"
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChartMetrics'
      responses:
        "200":
          description: "success"
        400:
          $ref: '#/components/responses/ValidationException'
        500:
          $ref: '#/components/responses/InternalErrorException'

components:
  securitySchemes:
    accountId:
      type: "apiKey"
      name: "accountId"
      in: "cookie"


  responses:
    ValidationException:
      description: Invalid request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                nullable: false
              errors:
                type: object
                nullable: false
              message:
                type: string
                nullable: false
              path:
                type: string
                nullable: false
              status:
                type: integer
                enum: [400]
                nullable: false
              timestamp:
                type: string
                nullable: false
    InternalErrorException:
      description: Internal error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                nullable: false
              message:
                type: string
                nullable: false
              path:
                type: string
                nullable: false
              status:
                type: integer
                enum: [500]
                nullable: false
              timestamp:
                type: string
                nullable: false
    NotFoundException:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                nullable: false
              message:
                type: string
                nullable: false
              path:
                type: string
                nullable: false
              status:
                type: integer
                enum: [404]
                nullable: false
              timestamp:
                type: string
                nullable: false

  schemas:
    Account:
      type: object
      required:
        - id
        - email
        - isAdmin
        - name
        - phone
        - photoUrl
        - provider
      properties:
        id:
          type: string
          nullable: false
        email:
          type: string
          nullable: false
        isAdmin:
          type: boolean
          nullable: false
        name:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        photoUrl:
          type: string
          nullable: true
        provider:
          type: string
          nullable: false

    BaseQuestion:
      type: object
      required:
        - isCertified
        - isFeatured
        - link
        - questionText
        - searchLinks
        - searchSnippets
        - searchTitles
        - title
      properties:
        questionText:
          type: string
          nullable: false
        answerText:
          type: string
          nullable: true
        isCertified:
          type: boolean
          nullable: false
        isFeatured:
          type: boolean
          nullable: false
        link:
          type: string
          nullable: true
        searchLinks:
          type: array
          items:
            type: string
          nullable: true
        searchSnippets:
          type: array
          items:
            type: string
          nullable: true
        searchTitles:
          type: array
          items:
            type: string
          nullable: true
        title:
          type: string
          nullable: true

    Question:
      allOf:
        - $ref: '#/components/schemas/BaseQuestion'
        - type: object
          required:
            - id
            - queryCount
            - helpfulCount
            - notHelpfulCount
          properties:
            id:
              type: string
              nullable: false
            queryCount:
              type: integer
              nullable: false
            helpfulCount:
              type: integer
              nullable: false
            notHelpfulCount:
              type: integer
              nullable: false

    QuestionPage:
      type: object
      required:
        - pageSize
        - totalSize
        - questions
      properties:
        pageSize:
          type: integer
          nullable: false
        totalSize:
          type: integer
          nullable: false
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'

    Query:
      type: object
      required:
        - id
        - questionText
        - answerText
        - link
        - source
        - timestamp
        - visitorId
        - wasHelpful
      properties:
        id:
          type: string
          nullable: false
        questionText:
          type: string
          nullable: false
        answerText:
          type: string
          nullable: true
        link:
          type: string
          nullable: true
        source:
          type: string
          nullable: false
        timestamp:
          type: integer
          nullable: false
        visitorId:
          type: string
          nullable: true
        wasHelpful:
          type: boolean
          nullable: true
    SlackTeam:
      type: object
      required:
        - accessToken
        - accountId
        - botAccessToken
        - botIconUrl
        - botId
        - botName
        - botUserId
        - enterpriseId
        - id
        - sld
        - teamId
        - teamName
      properties:
        accessToken:
          type: string
          nullable: false
        accountId:
          type: string
          nullable: false
        botAccessToken:
          type: string
          nullable: false
        botIconUrl:
          type: string
          nullable: true
        botId:
          type: string
          nullable: false
        botName:
          type: string
          nullable: true
        botUserId:
          type: string
          nullable: false
        enterpriseId:
          type: string
          nullable: true
        id:
          type: string
          nullable: false
        sld:
          type: string
          nullable: false
        teamId:
          type: string
          nullable: false
        teamName:
          type: string
          nullable: false
    Website:
      type: object
      required:
        - callToActionExists
        - callToActionLink
        - canSearchWeb
        - color
        - contactLink
        - headerText
        - id
        - sld
        - subdomains
      properties:
        callToActionExists:
          type: boolean
          nullable: false
        callToActionLink:
          type: string
          nullable: false
        canSearchWeb:
          type: boolean
          nullable: false
        color:
          type: string
          nullable: false
        contactLink:
          type: string
          nullable: false
        headerText:
          type: string
          nullable: false
        id:
          type: string
          nullable: false
        sld:
          type: string
          nullable: false
        subdomains:
          nullable: false
          type: array
          items:
            type: string

    Chart:
      type: object
      properties:
        chartType:
          type: string
          enum: [line, bar, area]
        id:
          type: string
        name:
          type: string
        period:
          type: string
          enum: [hour, day, week, month, all_time]
        websiteId:
          type: string
        metrics:
          $ref: '#/components/schemas/ChartMetrics'
    ChartMetrics:
      type: array
      items:
        oneOf:
        - $ref: '#/components/schemas/ChartMetricQuery'
        - $ref: '#/components/schemas/ChartMetricVisit'
        - $ref: '#/components/schemas/ChartMetricOpen'
        - $ref: '#/components/schemas/ChartMetricClose'
        - $ref: '#/components/schemas/ChartMetricClickCTA'
    ChartMetricQuery:
      type: object
      description: Query
      properties:
        type:
          type: string
          enum: [query]
        filters:
          properties:
            answerText:
              type: string
            questionText:
              type: string
            source:
              type: string
              enum: [web, slack]
            wasHelpful:
              type: boolean
          type: object

    ChartMetricVisit:
      type: object
      properties:
        filters:
          properties:
            url:
              type: string
          type: object
        type:
          type: string
          enum: [visit]
    ChartMetricOpen:
      type: object
      properties:
        filters:
          properties:
            url:
              type: string
          type: object
        type:
          type: string
          enum: [open]
    ChartMetricClose:
      type: object
      properties:
        filters:
          properties:
            url:
              type: string
          type: object
        type:
          type: string
          enum: [close]
    ChartMetricClickCTA:
      type: object
      properties:
        filters:
          properties:
            url:
              type: string
          type: object
        type:
          type: string
          enum: [clickCTA]

    RequestBodyQuestionsSearchPost:
      type: object
      properties:
        isCertified:
          type: boolean
        isFeatured:
          type: boolean
        text:
          type: string

    RequestBodyQueriesHistoryGet:
      type: object
      properties:
        notAnswered:
          type: boolean
        pages:
          type: integer
        query:
          type: string
        toCsv:
          type: boolean
        wasHelpful:
          type: boolean
        wasNotHelpful:
          type: boolean
        websiteId:
          type: string

    RequestBodyQueriesPost:
      type: object
      properties:
        accountId:
          type: string
        query:
          type: string
        url:
          type: string
        source:
          type: string
        location:
          type: string
        visitorId:
          type: string
        ignoreCache:
          type: boolean
    RequestBodyWebsitesPost:
      type: object
      properties:
        url:
          type: string


